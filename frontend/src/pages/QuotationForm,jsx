import React, { useState } from 'react';
import './QuotationForm.css';
import techEleconLogo from './tech_elecon_logo.jpeg';

const QuotationForm = () => {
        const [formData, setFormData] = useState({
            companyName: 'TECH ELECON PVT. LTD',
            address: 'Anand Sojitra Road',
            cityState: 'Vallabh Vidyanagar, Gujarat',
            postalCode: '388120',
            email: 'inquiry@techelecon.com',
            billToCompany: '',
            billToAddress: '',
            billToCityState: '',
            billToPostalCode: '',
            poNumber: '',
            date: '',
            deliveryDate: '',
            services: [
                { description: '', hours: 0, ratePerHour: 0, amount: 0 },
            ],
            taxRate: 0,
            notes: '',
            paymentTerms: '50% Advance, Remaining on Completion',
            paymentMode: 'Bank Transfer',
            completionDate: 'yyyy-mm-dd',
            customPaymentTerms: '',
        });

        const [errors, setErrors] = useState({});

        const validateField = (name, value) => {
            let error = '';
            switch (name) {
                case 'billToCompany':
                    if (!value.trim()) error = 'Company name is required';
                    break;
                case 'billToAddress':
                    if (!value.trim()) error = 'Address is required';
                    break;
                case 'billToCityState':
                    if (!value.trim()) error = 'City/State is required';
                    break;
                case 'billToPostalCode':
                    if (!value.trim()) error = 'Postal code is required';
                    break;
                case 'poNumber':
                    if (!value.trim()) error = 'Quote number is required';
                    break;
                case 'date':
                case 'deliveryDate':
                case 'completionDate':
                    if (!value) error = 'Date is required';
                    break;
                case 'taxRate':
                    if (value < 0) error = 'Tax rate cannot be negative';
                    break;
                case 'customPaymentTerms':
                    if (formData.paymentTerms === 'Custom' && !value.trim())
                        error = 'Custom payment terms are required';
                    break;
                default:
                    break;
            }
            return error;
        };

        const handleChange = (e) => {
            const { name, value } = e.target;
            setFormData({...formData, [name]: value });
            const error = validateField(name, value);
            setErrors({...errors, [name]: error });
        };

        const handlePaymentTermsChange = (e) => {
            const value = e.target.value;
            setFormData({
                ...formData,
                paymentTerms: value,
                customPaymentTerms: value === 'Custom' ? formData.customPaymentTerms : ''
            });
            const error = validateField('paymentTerms', value);
            setErrors({...errors, paymentTerms: error });
        };

        const handlePaymentModeChange = (e) => {
            const value = e.target.value;
            setFormData({...formData, paymentMode: value });
            const error = validateField('paymentMode', value);
            setErrors({...errors, paymentMode: error });
        };

        const handleServiceChange = (index, field, value) => {
            const newServices = [...formData.services];
            if (field === 'description') {
                newServices[index][field] = value;
            } else if (field === 'hours' || field === 'ratePerHour') {
                newServices[index][field] = parseFloat(value) || 0;
                newServices[index].amount = calculateAmount(newServices[index].hours, newServices[index].ratePerHour);
            }
            setFormData({...formData, services: newServices });
        };

        const addService = () => {
            setFormData({
                ...formData,
                services: [...formData.services, { description: '', hours: 0, ratePerHour: 0, amount: 0 }],
            });
        };

        const removeService = () => {
            if (formData.services.length > 1) {
                setFormData({
                    ...formData,
                    services: formData.services.slice(0, -1),
                });
            }
        };

        const calculateAmount = (hours, ratePerHour) => hours * ratePerHour;
        const calculateSubtotal = () => formData.services.reduce((sum, service) => sum + service.amount, 0);
        const calculateTax = () => (calculateSubtotal() * formData.taxRate) / 100;
        const calculateTotal = () => calculateSubtotal() + calculateTax();

        const handleSubmit = (e) => {
            e.preventDefault();
            let newErrors = {};
            Object.keys(formData).forEach((key) => {
                if (key !== 'services' && key !== 'notes') {
                    const error = validateField(key, formData[key]);
                    if (error) newErrors[key] = error;
                }
            });

            formData.services.forEach((service, index) => {
                if (!service.description.trim()) {
                    newErrors[`serviceDescription${index}`] = 'Service description is required';
                }
                if (service.hours <= 0) {
                    newErrors[`serviceHours${index}`] = 'Hours must be greater than 0';
                }
                if (service.ratePerHour <= 0) {
                    newErrors[`serviceRate${index}`] = 'Rate per hour must be greater than 0';
                }
            });

            setErrors(newErrors);

            if (Object.keys(newErrors).length === 0) {
                const submissionData = {
                    ...formData,
                    subtotal: calculateSubtotal(),
                    tax: calculateTax(),
                    total: calculateTotal(),
                };
                console.log('Form submitted:', submissionData);
                alert('Quotation submitted successfully!');
            } else {
                console.log('Form has errors:', newErrors);
            }
        };

        return ( <
                form onSubmit = { handleSubmit }
                className = "quotation-form" >
                <
                h1 > Quotation Form < /h1> <
                div className = "header" >
                <
                div className = "company-details" >
                <
                strong > { formData.companyName } < /strong> <
                p > Address: { formData.address } < /p> <
                p > City / State: { formData.cityState } < /p> <
                p > Postal Code: { formData.postalCode } < /p> <
                p > Email Address: { formData.email } < /p> <
                /div> <
                div className = "quotation-details" >
                <
                div >
                <
                label > Quotation: < /label> <
                input type = "text"
                name = "poNumber"
                value = { formData.poNumber }
                onChange = { handleChange }
                placeholder = "Enter Quote number"
                className = { errors.poNumber ? 'error' : '' }
                /> {
                    errors.poNumber && < span className = "error-message" > { errors.poNumber } < /span>} <
                        /div> <
                        div >
                        <
                        label > Date: < /label> <
                        input
                    type = "date"
                    name = "date"
                    value = { formData.date }
                    onChange = { handleChange }
                    className = { errors.date ? 'error' : '' }
                    /> {
                        errors.date && < span className = "error-message" > { errors.date } < /span>} <
                            /div> <
                            div >
                            <
                            label > Delivery Date: < /label> <
                            input
                        type = "date"
                        name = "deliveryDate"
                        value = { formData.deliveryDate }
                        onChange = { handleChange }
                        className = { errors.deliveryDate ? 'error' : '' }
                        /> {
                            errors.deliveryDate && < span className = "error-message" > { errors.deliveryDate } < /span>} <
                                /div> <
                                /div> <
                                /div> <
                                div className = "bill-to-section" >
                                <
                                p > < strong > Customer Section < /strong></p >
                                <
                                div className = "bill-to-row" >
                                <
                                div >
                                <
                                label > Company Name: < /label> <
                                input
                            type = "text"
                            name = "billToCompany"
                            value = { formData.billToCompany }
                            onChange = { handleChange }
                            placeholder = "Enter company name"
                            className = { errors.billToCompany ? 'error' : '' }
                            /> {
                                errors.billToCompany && < span className = "error-message" > { errors.billToCompany } < /span>} <
                                    /div> <
                                    div >
                                    <
                                    label > Address: < /label> <
                                    input
                                type = "text"
                                name = "billToAddress"
                                value = { formData.billToAddress }
                                onChange = { handleChange }
                                placeholder = "Enter address"
                                className = { errors.billToAddress ? 'error' : '' }
                                /> {
                                    errors.billToAddress && < span className = "error-message" > { errors.billToAddress } < /span>} <
                                        /div> <
                                        div >
                                        <
                                        label > City / State: < /label> <
                                        input
                                    type = "text"
                                    name = "billToCityState"
                                    value = { formData.billToCityState }
                                    onChange = { handleChange }
                                    placeholder = "Enter city/state"
                                    className = { errors.billToCityState ? 'error' : '' }
                                    /> {
                                        errors.billToCityState && < span className = "error-message" > { errors.billToCityState } < /span>} <
                                            /div> <
                                            div >
                                            <
                                            label > Postal Code: < /label> <
                                            input
                                        type = "text"
                                        name = "billToPostalCode"
                                        value = { formData.billToPostalCode }
                                        onChange = { handleChange }
                                        placeholder = "Enter postal code"
                                        className = { errors.billToPostalCode ? 'error' : '' }
                                        /> {
                                            errors.billToPostalCode && < span className = "error-message" > { errors.billToPostalCode } < /span>} <
                                                /div> <
                                                /div> <
                                                /div> <
                                                div className = "service-section" >
                                                <
                                                table >
                                                <
                                                thead >
                                                <
                                                tr >
                                                <
                                                th > Description < /th> <
                                                th > Hours < /th> <
                                                th > Rate per Hour < /th> <
                                                th > Amount < /th> <
                                                /tr> <
                                                /thead> <
                                                tbody > {
                                                    formData.services.map((service, index) => ( <
                                                        tr key = { index } >
                                                        <
                                                        td >
                                                        <
                                                        input type = "text"
                                                        value = { service.description }
                                                        onChange = {
                                                            (e) => handleServiceChange(index, 'description', e.target.value) }
                                                        placeholder = "Enter service description"
                                                        className = { errors[`serviceDescription${index}`] ? 'error' : '' }
                                                        /> {
                                                            errors[`serviceDescription${index}`] && ( <
                                                                span className = "error-message" > { errors[`serviceDescription${index}`] } < /span>
                                                            )
                                                        } <
                                                        /td> <
                                                        td >
                                                        <
                                                        input type = "number"
                                                        value = { service.hours }
                                                        onChange = {
                                                            (e) => handleServiceChange(index, 'hours', e.target.value) }
                                                        min = "0"
                                                        placeholder = "0"
                                                        className = { errors[`serviceHours${index}`] ? 'error' : '' }
                                                        /> {
                                                            errors[`serviceHours${index}`] && ( <
                                                                span className = "error-message" > { errors[`serviceHours${index}`] } < /span>
                                                            )
                                                        } <
                                                        /td> <
                                                        td >
                                                        <
                                                        input type = "number"
                                                        value = { service.ratePerHour }
                                                        onChange = {
                                                            (e) => handleServiceChange(index, 'ratePerHour', e.target.value) }
                                                        min = "0"
                                                        placeholder = "0"
                                                        className = { errors[`serviceRate${index}`] ? 'error' : '' }
                                                        /> {
                                                            errors[`serviceRate${index}`] && ( <
                                                                span className = "error-message" > { errors[`serviceRate${index}`] } < /span>
                                                            )
                                                        } <
                                                        /td> <
                                                        td > { service.amount.toFixed(2) } < /td> <
                                                        /tr>
                                                    ))
                                                } <
                                                /tbody> <
                                                /table> <
                                                div className = "button-container" >
                                                <
                                                button type = "button"
                                            onClick = { addService } > Add Service < /button> <
                                                button type = "button"
                                            onClick = { removeService }
                                            disabled = { formData.services.length === 1 } >
                                                Remove Service <
                                                /button> <
                                                /div> <
                                                /div> <
                                                div className = "summary" >
                                                <
                                                p > Subtotal: { calculateSubtotal().toFixed(2) } < /p> <
                                                div >
                                                <
                                                label > Tax Rate( % ): < /label> <
                                                input
                                            type = "number"
                                            name = "taxRate"
                                            value = { formData.taxRate }
                                            onChange = { handleChange }
                                            min = "0"
                                            placeholder = "0"
                                            className = { errors.taxRate ? 'error' : '' }
                                            /> {
                                                errors.taxRate && < span className = "error-message" > { errors.taxRate } < /span>} <
                                                    /div> <
                                                    p > Tax: { calculateTax().toFixed(2) } < /p> <
                                                    p > < strong > Total: { calculateTotal().toFixed(2) } < /strong></p >
                                                    <
                                                    /div>


                                                <
                                                div className = "payment-terms-section" >
                                                    <
                                                    p > < strong > Payment & Terms: < /strong></p >
                                                    <
                                                    div className = "payment-terms-row" >
                                                    <
                                                    div >
                                                    <
                                                    label > Payment Terms: < /label> <
                                                    select
                                                name = "paymentTerms"
                                                value = { formData.paymentTerms }
                                                onChange = { handlePaymentTermsChange }
                                                className = { errors.paymentTerms ? 'error' : '' } >
                                                    <
                                                    option value = "50% Advance, Remaining on Completion" > 50 % Advance, Remaining on Completion < /option> <
                                                    option value = "100% Advance" > 100 % Advance < /option> <
                                                    option value = "30% Advance, 70% on Completion" > 30 % Advance, 70 % on Completion < /option> <
                                                    option value = "Custom" > Custom < /option> <
                                                    /select> {
                                                        errors.paymentTerms && < span className = "error-message" > { errors.paymentTerms } < /span>} { /* Conditional Custom Payment Terms Textarea */ } {
                                                                formData.paymentTerms === 'Custom' && ( <
                                                                    div className = "custom-payment-terms" >
                                                                    <
                                                                    label > Custom Payment Terms: < /label> <
                                                                    textarea name = "customPaymentTerms"
                                                                    value = { formData.customPaymentTerms }
                                                                    onChange = { handleChange }
                                                                    placeholder = "Enter custom payment terms..."
                                                                    rows = "3"
                                                                    className = { errors.customPaymentTerms ? 'error' : '' }
                                                                    /> {
                                                                        errors.customPaymentTerms && ( <
                                                                            span className = "error-message" > { errors.customPaymentTerms } < /span>
                                                                        )
                                                                    } <
                                                                    /div>
                                                                )
                                                            } <
                                                            /div> <
                                                            div >
                                                            <
                                                            label > Payment Mode: < /label> <
                                                            div > {
                                                                ['Bank Transfer', 'UPI', 'Cash', 'Cheque'].map((mode) => ( <
                                                                    label key = { mode } >
                                                                    <
                                                                    input type = "radio"
                                                                    name = "paymentMode"
                                                                    value = { mode }
                                                                    checked = { formData.paymentMode === mode }
                                                                    onChange = { handlePaymentModeChange }
                                                                    className = { errors.paymentMode ? 'error' : '' }
                                                                    />{' '} { mode } <
                                                                    /label>
                                                                ))
                                                            } <
                                                            /div> {
                                                                errors.paymentMode && < span className = "error-message" > { errors.paymentMode } < /span>} <
                                                                    /div> <
                                                                    div >
                                                                    <
                                                                    label > Estimated Completion Date: < /label> <
                                                                    input
                                                                type = "date"
                                                                name = "completionDate"
                                                                value = { formData.completionDate }
                                                                onChange = { handleChange }
                                                                className = { errors.completionDate ? 'error' : '' }
                                                                /> {
                                                                    errors.completionDate && < span className = "error-message" > { errors.completionDate } < /span>} <
                                                                        /div> <
                                                                        /div> <
                                                                        /div>

                                                                    <
                                                                    div className = "notes" >
                                                                        <
                                                                        label htmlFor = "notes" > < strong > Notes: < /strong></label >
                                                                        <
                                                                        textarea
                                                                    id = "notes"
                                                                    name = "notes"
                                                                    value = { formData.notes }
                                                                    onChange = { handleChange }
                                                                    placeholder = "Enter your notes here..."
                                                                    rows = "4"
                                                                    className = "notes-textarea" /
                                                                        >
                                                                        <
                                                                        /div> <
                                                                        footer className = "footer" >
                                                                        <
                                                                        a href = "http://www.techelecon.com" > techelecon.com < /a> <
                                                                        img src = { techEleconLogo }
                                                                    alt = "TechElecon Logo"
                                                                    className = "logo" / >
                                                                        <
                                                                        /footer> <
                                                                        button type = "submit"
                                                                    className = "submit-button" > Submit Quotation < /button> <
                                                                        /form>
                                                                );
                                                            };

                                                        export default QuotationForm;